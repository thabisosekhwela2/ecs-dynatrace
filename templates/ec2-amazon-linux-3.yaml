AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Linux 3 EC2 Instance with Dynatrace ActiveGate'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge

  InstanceName:
    Type: String
    Default: service-catalog-instance
    Description: Name for the EC2 instance

  Environment:
    Type: String
    Default: dev
    Description: Environment name
    AllowedValues:
      - dev
      - staging
      - prod

  KeyPairName:
    Type: String
    Default: ""
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance

  VpcId:
    Type: String
    Default: ""
    Description: VPC ID where the instance will be launched

  SubnetId:
    Type: String
    Default: ""
    Description: Subnet ID where the instance will be launched

  IamInstanceProfileName:
    Type: String
    Default: ""
    Description: Name of the IAM instance profile to attach to the EC2 instance

Resources:
  # Security Group for EC2 instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Service Catalog EC2 instance
      GroupName: !Sub "${InstanceName}-sg"
      VpcId: !If [HasVpcId, !Ref VpcId, !Ref AWS::NoValue]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 9999
          ToPort: 9999
          CidrIp: 0.0.0.0/0
          Description: Dynatrace ActiveGate port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${InstanceName}-security-group"
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AWS::SSM::Parameter::Value::String::/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyPairName, !Ref KeyPairName, !Ref AWS::NoValue]
      SubnetId: !If [HasSubnetId, !Ref SubnetId, !Ref AWS::NoValue]
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !If [HasIamInstanceProfile, !Ref IamInstanceProfileName, !Ref AWS::NoValue]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Update system
          yum update -y
          
          # Install required packages
          yum install -y curl wget jq
          
          # Install CloudWatch Agent
          yum install -y amazon-cloudwatch-agent
          
          # Configure CloudWatch Agent
          cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json << 'EOF'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "cwagent"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/aws/ec2/${InstanceName}/messages",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "/aws/ec2/${InstanceName}/secure",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "metrics_collected": {
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch Agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent
          
          # Tag the instance
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 create-tags --resources $INSTANCE_ID --tags \
            Key=Name,Value=${InstanceName} \
            Key=Environment,Value=${Environment} \
            Key=ManagedBy,Value=CloudFormation
          
          echo "EC2 instance setup completed successfully"
      Tags:
        - Key: Name
          Value: !Ref InstanceName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

Conditions:
  HasKeyPairName: !Not [!Equals [!Ref KeyPairName, ""]]
  HasVpcId: !Not [!Equals [!Ref VpcId, ""]]
  HasSubnetId: !Not [!Equals [!Ref SubnetId, ""]]
  HasIamInstanceProfile: !Not [!Equals [!Ref IamInstanceProfileName, ""]]

Outputs:
  InstanceId:
    Description: ID of the created EC2 instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  InstancePublicIP:
    Description: Public IP address of the created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-InstancePublicIP"

  InstancePrivateIP:
    Description: Private IP address of the created EC2 instance
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-InstancePrivateIP"

  SecurityGroupId:
    Description: ID of the security group created for the EC2 instance
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  CloudformationStackARN:
    Description: ARN of the CloudFormation stack
    Value: !Ref AWS::StackId
    Export:
      Name: !Sub "${AWS::StackName}-StackARN" 